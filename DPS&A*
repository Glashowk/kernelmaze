'''
Created on Dec 10, 2018

@author: KGLASHOW
'''
from random import randint
from random import shuffle
from math import inf
from heapq import heappop, heappush

def build_maze(m,n,swag):
  grid = []  
  for i in range(m):
    row = []
    for j in range(n):
      row.append("wall")
    grid.append(row)
  start_i = randint(0,m-1)
  start_j = randint(0,n-1)
  grid[start_i][start_j] = 'Start'
  mow(grid,start_i,start_j)
  i,j = explore_maze(grid,start_i,start_j,swag)
  print("ORIGINAL MAZE ")
  print_maze(grid)
  print("\n"  + "A* Solution")
  grid1, loot_bag = a_star(grid,start_i,start_j,i,j)
  print_maze(grid1, loot_bag)
  print("\n"  + "DFS Solution")
  grid2, loot_bag = dfs(grid,start_i,start_j,i,j)
  print_maze(grid2, loot_bag)
  

def print_maze (grid,loot_bag=None):
  for row in grid:
    printable_row = ''
    for cell in row:
      if cell == "wall":
        char = '|#|'
      elif cell == 'empty':
        char = '   '
      elif cell == 'traveled':
        char = ' ^ '
      else: 
        char = ' {0} '.format(cell[0])
      printable_row += char
    print(printable_row)
  if loot_bag:
    unique_loot = list(set(loot_bag))
    for loot in unique_loot:
      count = loot_bag.count(loot)
      print('You collected {0} {1}'.format(count,loot))
    
def mow(grid, i, j):
  directions= ['U', 'D', 'L', 'R']
  increment = 2
  '''Random increments cause too much over lap with the walls until almost all walls are removed. Increasing the increments will increase wall thickness and make the maze easier to see, but less complex as long coridoors will open up. ''' 
  while len(directions) >= 1:
    directions_index = randint(0,len(directions)-1)
    direction = directions.pop(directions_index)
    if direction == 'U':
      if i - increment < 0:
        continue
      elif grid[i - increment][j] == 'wall':
        for inc in range(1,increment+1):
          grid[i -inc][j] = 'empty'
        mow(grid,i-inc,j)
    elif direction == 'D':
      if i + increment >= len(grid):
        continue
      elif grid[i+increment][j] == 'wall':
        for inc in range(1,increment+1):
          grid[i +inc][j] = 'empty'
        mow(grid,i+inc,j)
    elif direction == 'L':
      if j - increment < 0:
        continue
      elif grid[i][j-increment] == 'wall':
        for inc in range(1,increment+1):
          grid[i][j-inc] = 'empty'
        mow(grid,i,j-inc)
    elif direction == 'R':
      if j + increment >= len(grid[0]):
        continue
      elif grid[i][j+increment] == 'wall':
        for inc in range(1,increment+1):
          grid[i][j+inc] = 'empty'
        mow(grid,i,j+inc)

def explore_maze(grid,start_i,start_j,swag):
  grid_copy = [row[:] for row in grid]
  bfs_queue =[[start_i,start_j]]  
  directions = ['U','D','L','R']
  while bfs_queue:
    i, j = bfs_queue.pop(0)
    if grid[i][j] != 'Start' and randint(1,10) == 1:
      grid[i][j] = swag[randint(0,len(swag)-1)]
    grid_copy[i][j] = 'visited'
    for direction in directions:
      explore_i, explore_j = i, j
      if direction == 'U':
        if explore_i - 1 < 0:
          continue
        elif grid_copy[explore_i -1][explore_j] != 'wall' and grid_copy[explore_i -1][explore_j] != 'visited':
            bfs_queue.append([explore_i -1,explore_j])
      elif direction == 'D':
        if explore_i + 1 >= len(grid):
          continue
        elif grid_copy[explore_i +1][explore_j] != 'wall' and grid_copy[explore_i +1][explore_j] != 'visited':
            bfs_queue.append([explore_i +1,explore_j])
      elif direction == 'L':
        if explore_j - 1 < 0:
          continue
        elif grid_copy[explore_i][explore_j-1] != 'wall' and grid_copy[explore_i][explore_j-1] != 'visited':
            bfs_queue.append([explore_i,explore_j-1])
      elif direction == 'R':
        if explore_j + 1 >= len(grid[0]):
          continue
        elif grid_copy[explore_i][explore_j+1] != 'wall' and grid_copy[explore_i][explore_j+1] != 'visited':
            bfs_queue.append([explore_i,explore_j+1])
  #print(i,j)
  grid[i][j] = 'End'   
  return i,j

def heuristic(start, target):
  x_distance = abs(int(start[0]) - int(target[0]))
  y_distance = abs(int(start[1]) - int(target[1]))
  return x_distance + y_distance

def a_star(grid, start_i, start_j, end_i, end_j):
  #count = 0
  paths_and_distances = {}
  start = '{0},{1}'.format(start_i,start_j)
  end = '{0},{1}'.format(end_i,end_j)
  grid_copy = [row[:] for row in grid]
  for x in range(len(grid)):
    for y in range(len(grid[0])):
      xy ='{0},{1}'.format(x,y)
      paths_and_distances[xy] = [inf, inf]
      
  paths_and_distances[start] = [0,heuristic(start.split(','),end.split(","))]
  
  vertices_to_explore = [(0, start)] 
  directions = ['U','D','L','R']
  loot_bag = []
  new_path = []
  
  while vertices_to_explore and paths_and_distances[end][1] == inf:
    current_distance, current_vertex = heappop(vertices_to_explore)
    ij = current_vertex.split(',')
    i,j = int(ij[0]),int(ij[1])
    if grid_copy[i][j] != 'empty' and grid_copy[i][j] != 'Start':
      loot_bag.append(grid_copy[i][j])
    grid_copy[i][j] = 'traveled'
    neighbors = []
    for direction in directions:
      explore_i, explore_j = i, j
      if direction == 'U':
        if explore_i - 1 < 0:
          continue
        elif grid_copy[explore_i -1][explore_j] != 'wall' and grid_copy[explore_i -1][explore_j] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i -1,explore_j)
          neighbors.append(neighbor)
      elif direction == 'D':
        if explore_i + 1 >= len(grid):
          continue
        elif grid_copy[explore_i +1][explore_j] != 'wall' and grid_copy[explore_i +1][explore_j] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i +1,explore_j)
          neighbors.append(neighbor)
      elif direction == 'L':
        if explore_j - 1 < 0:
          continue
        elif grid_copy[explore_i][explore_j-1] != 'wall' and grid_copy[explore_i][explore_j-1] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i,explore_j-1)
          neighbors.append(neighbor)
      elif direction == 'R':
        if explore_j + 1 >= len(grid[0]):
          continue
        elif grid_copy[explore_i][explore_j+1] != 'wall' and grid_copy[explore_i][explore_j+1] != 'traveled':
          neighbor =  '{0},{1}'.format(explore_i,explore_j+1)
          neighbors.append(neighbor)
  


    for neighbor in neighbors:
      new_distance = current_distance + 1 + heuristic(neighbor.split(','), end.split(','))
      new_path = [current_vertex] + [neighbor]
      if new_distance < paths_and_distances[neighbor][0]:
            paths_and_distances[neighbor][0] = new_distance
            paths_and_distances[neighbor][1] = new_path
            heappush(vertices_to_explore, (new_distance, neighbor))
  
  grid_copy[start_i][start_j] = 'Start'         
  return grid_copy, loot_bag
  
def dfs(grid,start_i,start_j,end_i,end_j,visited = None,loot_bag = None):
  current_vertex = '{0},{1}'.format(start_i,start_j)
  target_vertex = '{0},{1}'.format(end_i,end_j)
  if visited is None:
    visited = [] 
  visited.append(current_vertex)
  if current_vertex == target_vertex:
    return grid, loot_bag
  
  neighbors=[]
  directions = ['U','D','L','R']
  shuffle(directions)
  if loot_bag is None:
    loot_bag = []
  if grid[start_i][start_j] != 'empty' and grid[start_i][start_j] != 'Start':
      loot_bag.append(grid[start_i][start_j])
  grid[start_i][start_j] = 'traveled'
  for direction in directions:
    explore_i, explore_j = start_i, start_j
    if direction == 'U':
      if explore_i - 1 < 0:
        continue
      elif grid[explore_i -1][explore_j] != 'wall' and grid[explore_i -1][explore_j] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i -1,explore_j)
          neighbors.append(neighbor)
    elif direction == 'D':
      if explore_i + 1 >= len(grid):
        continue
      elif grid[explore_i +1][explore_j] != 'wall' and grid[explore_i +1][explore_j] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i +1,explore_j)
          neighbors.append(neighbor)
    elif direction == 'L':
      if explore_j - 1 < 0:
        continue
      elif grid[explore_i][explore_j-1] != 'wall' and grid[explore_i][explore_j-1] != 'traveled':
          neighbor = '{0},{1}'.format(explore_i,explore_j-1)
          neighbors.append(neighbor)
    elif direction == 'R':
      if explore_j + 1 >= len(grid[0]):
        continue
      elif grid[explore_i][explore_j+1] != 'wall' and grid[explore_i][explore_j+1] != 'traveled':
          neighbor =  '{0},{1}'.format(explore_i,explore_j+1)
          neighbors.append(neighbor)
          
  for neighbor in neighbors:
    if neighbor not in visited:
      neighbor = neighbor.split(',')
      start_i, start_j =int(neighbor[0]),int(neighbor[1])
      path = dfs(grid,start_i,start_j,end_i,end_j,visited,loot_bag)
      if path:
        return path
'''  
  def dfs(graph, current_vertex, target_value, visited = None):
  if visited is None:
    visited = []
  visited.append(current_vertex)
  if current_vertex is target_value:
    return visited
  
  for neighbor in graph[current_vertex]:
    if neighbor not in visited:
      path = dfs(graph, neighbor, target_value, visited)
      if path:
        return path
'''  
build_maze(40,40,['candy corn','werewolf','pumpkin'])


